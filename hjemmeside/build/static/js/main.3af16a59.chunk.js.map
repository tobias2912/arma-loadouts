{"version":3,"sources":["icons/trikk.jpg","Sidebar.js","Title.js","Footer.js","Section.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Sidebar","className","Button","color","Title","styles","backgroundImage","tram","Footer","Section","props","Paper","dangerouslySetInnerHTML","filename","__html","marked","sanitize","breaks","theme","createMuiTheme","palette","secondary","main","App","CssBaseline","Helmet","name","content","Container","maxwidth","Grid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,mC,sOCe5BC,MARf,WACE,OACE,yBAAKC,UAAU,WACX,kBAACC,EAAA,EAAD,CAAQC,MAAM,aAAd,UACA,kBAACD,EAAA,EAAD,CAAQC,MAAM,aAAd,gB,yBCDOC,MAPf,WACE,OACE,yBAAKH,UAAU,QAAQI,OAAQ,CAAEC,gBAAgB,OAAD,OAAQC,IAAR,OAC9C,oDCESC,EANA,kBACb,yBAAKP,UAAU,UACb,6C,yBCeWQ,MALf,SAAiBC,GAEf,OAAO,kBAACC,EAAA,EAAD,CAAOC,yBAXSC,EAWgCH,EAAMG,SARtD,CAAEC,OADOC,IAAOF,EAAU,CAAEG,UAAU,EAAOC,QAAO,QAF7D,IAAyBJ,G,gDCMnBK,EAAQC,YAAe,CAC3BC,QAAS,CACPC,UAAW,CACTC,KAAM,cAiCGC,MA5Bf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,IAAD,CAAkBiB,MAAOA,GACvB,kBAACM,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,yCACA,0BACEC,KAAK,WACLC,QAAQ,0DAGZ,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,CAASjB,SAAS,mDAClB,kBAAC,EAAD,CAASA,SAAS,uCAKtB,kBAAC,EAAD,SC7BYkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3af16a59.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trikk.cc8ed5a0.jpg\";","import React from 'react'\r\nimport './Sidebar.css'\r\n\r\nimport { Button } from '@material-ui/core';\r\nimport 'fontsource-roboto';\r\n\r\n\r\nfunction Sidebar() {\r\n  return (\r\n    <div className=\"sidebar\">\r\n        <Button color=\"secondary\">Github</Button>\r\n        <Button color=\"secondary\">Andre ting</Button>\r\n    </div>\r\n  )\r\n}\r\nexport default Sidebar","import React from 'react'\r\nimport './Title.css';\r\nimport tram from './icons/trikk.jpg'; \r\nfunction Title() {\r\n  return (\r\n    <div className=\"Title\" styles={{ backgroundImage:`url(${tram})` }}>\r\n      <h1>Tobias sin side :)</h1>\r\n    </div>\r\n  )\r\n}\r\nexport default Title","import React from \"react\";\r\n\r\nconst Footer = () => (\r\n  <div className=\"footer\">\r\n    <p>No copyright</p>\r\n  </div>\r\n);\r\n\r\nexport default Footer;","import { Paper } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport marked from 'marked'\r\n\r\n\r\nfunction getMarkdownText(filename) {\r\n\r\n  var rawMarkup = marked(filename, { sanitize: false, breaks:true });\r\n  return { __html: rawMarkup };\r\n}\r\n\r\n\r\n\r\n\r\nfunction Section(props) {\r\n\r\n  return <Paper dangerouslySetInnerHTML={getMarkdownText(props.filename)} />\r\n}\r\n\r\nexport default Section","import React from 'react';\r\nimport './App.css';\r\nimport Sidebar from \"./Sidebar\";\r\nimport Title from \"./Title\";\r\nimport Footer from \"./Footer\";\r\nimport Section from \"./Section\";\r\nimport Helmet from \"react-helmet\";\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { Container, Grid } from '@material-ui/core';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    secondary: {\r\n      main: '#ffffff'\r\n    }\r\n  }\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MuiThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        <Helmet>\r\n          <title>Tobben</title>\r\n          <meta\r\n            name=\"viewport\"\r\n            content=\"minimum-scale=1, initial-scale=1, width=device-width\"\r\n          />\r\n        </Helmet>\r\n        <Title />\r\n        <Sidebar />\r\n        <Container maxwidth=\"sm\">\r\n          <Grid>\r\n            <Section filename='## overskrift Hjemmeside  <br> # this is stuff' />\r\n            <Section filename='### overskrift Hjemmeside  sadas' />\r\n\r\n          </Grid>\r\n\r\n        </Container>\r\n        <Footer />\r\n      </MuiThemeProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}